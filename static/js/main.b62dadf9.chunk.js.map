{"version":3,"sources":["pages/cards/components/card_1/index.js","pages/cards/index.js","pages/home/index.js","App.js","serviceWorker.js","index.js"],"names":["Card1","className","title","description","color","map","card","index","key","style","backgroundColor","href","Cards","Home","App","console","log","process","path","exact","render","routerProps","Boolean","window","location","hostname","match","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kRAiDeA,G,MA9CD,WAsBV,OACI,yBAAKC,UAAU,aAtBA,CACf,CACIC,MAAO,KACPC,YACI,6JACJC,MAAO,WAEX,CACIF,MAAO,KACPC,YACI,6JACJC,MAAO,WAEX,CACIF,MAAO,KACPC,YACI,6JACJC,MAAO,YAMKC,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKC,IAAKD,EAAON,UAAU,QACvB,yBACIA,UAAU,SACVQ,MAAO,CAAEC,gBAAiBJ,EAAKF,QAC/B,wBAAIH,UAAU,SAASK,EAAKJ,QAEhC,yBAAKD,UAAU,WACX,uBAAGA,UAAU,eAAeK,EAAKH,aACjC,uBACIQ,KAAK,KACLV,UAAU,MACVQ,MAAO,CAAEC,gBAAiBJ,EAAKF,QAHnC,qBCzBTQ,EARD,WACV,OACI,6BACI,kBAAC,EAAD,QCIGC,EARF,WACT,OACI,6BACI,uBAAGF,KAAK,UAAR,WCaGG,EAbH,WAIR,OAFAC,QAAQC,IAAI,0BAA2BC,4BAInC,6BACI,kBAAC,IAAD,CAAOC,KAAM,IAAKC,OAAK,EAACC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAD,SACjD,kBAAC,IAAD,CAAOH,KAAM,SAAUC,OAAK,EAACC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAD,WCD9CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXNC,IAASP,OACD,kBAAC,IAAD,CAAQQ,SAAUX,4BACd,kBAAC,EAAD,OAGRY,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.b62dadf9.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Card1 = () => {\n    const cards_list = [\n        {\n            title: '01',\n            description:\n                'Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestias maxime numquam est incidunt provident corrupti saepe voluptatum sapiente nihil aperiam?',\n            color: '#EB4ECB',\n        },\n        {\n            title: '02',\n            description:\n                'Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestias maxime numquam est incidunt provident corrupti saepe voluptatum sapiente nihil aperiam?',\n            color: '#9F3CB3',\n        },\n        {\n            title: '03',\n            description:\n                'Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestias maxime numquam est incidunt provident corrupti saepe voluptatum sapiente nihil aperiam?',\n            color: '#4F309F',\n        },\n    ];\n\n    return (\n        <div className='container'>\n            {cards_list.map((card, index) => (\n                <div key={index} className='card'>\n                    <div\n                        className='circle'\n                        style={{ backgroundColor: card.color }}>\n                        <h2 className='title'>{card.title}</h2>\n                    </div>\n                    <div className='content'>\n                        <p className='description'>{card.description}</p>\n                        <a\n                            href='#!'\n                            className='btn'\n                            style={{ backgroundColor: card.color }}>\n                            Read More\n                        </a>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Card1;\n","import React from 'react';\nimport Card1 from './components/card_1';\n\nconst Cards = () => {\n    return (\n        <div>\n            <Card1 />\n        </div>\n    );\n};\n\nexport default Cards;\n","import React from 'react';\n\nconst Home = () => {\n    return (\n        <div>\n            <a href='/cards'>Cards</a>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Cards from './pages/cards';\nimport Home from './pages/home';\n\nconst App = () => {\n    // console.log(this.state);\n    console.log('This is the process.env', process.env.PUBLIC_URL);\n\n    return (\n        // <Home/>\n        <div>\n            <Route path={'/'} exact render={(routerProps) => <Home />} />\n            <Route path={'/cards'} exact render={(routerProps) => <Cards />} />\n        </div>\n    );\n};\n\nexport default App;\n\n// \"homepage\": \"https://devsmranjan.github.io/react-animations-css-js\",\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n        <Router basename={process.env.PUBLIC_URL}>\n            <App />\n        </Router>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}